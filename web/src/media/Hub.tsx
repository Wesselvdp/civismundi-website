/*
auto-generated by: https://github.com/react-spring/gltfjsx
*/

import React, { useRef } from 'react'
import { useLoader } from 'react-three-fiber'
import { useSpring, a } from 'react-spring/three'
import { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader'
import { DRACOLoader } from 'three/examples/jsm/loaders/DRACOLoader'

export default function Model(props) {
  const group = useRef()
  const { nodes } = useLoader(GLTFLoader, '/hub.glb', loader => {
    const dracoLoader = new DRACOLoader()
    dracoLoader.setDecoderPath('/draco-gltf/')
    loader.setDRACOLoader(dracoLoader)
  })
  const dist = 6
  const [springProps, set] = useSpring(() => ({
    tDistance: props.open ? dist : 0,
    fDistance: props.open ? dist : 0,
    sDistance: props.open ? -7.38 + dist : -7.38,
    opacity: props.open ? 0 : 1
    // config: {
    //   mass: 3,
    //   tension: 220,
    //   friction: 60
    // }
  }))

  const color = props.hovered ? props.hoverColor : props.defaultColor

  React.useEffect(() => {
    set({
      tDistance: props.open ? dist : 0,
      fDistance: props.open ? dist : 0,
      sDistance: props.open ? -7.38 + dist : -7.38,
      opacity: props.open ? 0 : 1
    })
  }, [props.open])

  return (
    <group ref={group} {...props} dispose={null} scale={[0.5, 0.5, 0.5]}>
      <a.mesh
        geometry={nodes.Plafont.geometry}
        position={springProps.tDistance.interpolate(d => [0, d, -7.38])}
      >
        <a.meshStandardMaterial
          transparent
          opacity={springProps.opacity}
          attach="material"
          color={color}
        />
      </a.mesh>
      <mesh geometry={nodes.Cube023.geometry}>
        <meshStandardMaterial attach="material" color={color} />
      </mesh>
      <a.mesh
        geometry={nodes.Side.geometry}
        position={springProps.sDistance.interpolate(d => [0, 0, d])}
      >
        <a.meshStandardMaterial
          transparent
          opacity={springProps.opacity}
          attach="material"
          color={color}
        />
      </a.mesh>
      <mesh geometry={nodes.Corner.geometry}>
        <meshStandardMaterial attach="material" color={color} />
      </mesh>
      <a.mesh
        geometry={nodes.Front.geometry}
        position={springProps.fDistance.interpolate(d => [d, 0, 0])}
      >
        <a.meshStandardMaterial
          transparent
          opacity={springProps.opacity}
          attach="material"
          color={color}
        />
      </a.mesh>
      <group position={[0, 0, -7.38]}>
        <mesh geometry={nodes['Cube.017_0'].geometry}>
          <meshStandardMaterial attach="material" color={color} />
        </mesh>
        <mesh geometry={nodes['Cube.017_1'].geometry}>
          <meshStandardMaterial attach="material" color={color} />
        </mesh>
      </group>
    </group>
  )
}
